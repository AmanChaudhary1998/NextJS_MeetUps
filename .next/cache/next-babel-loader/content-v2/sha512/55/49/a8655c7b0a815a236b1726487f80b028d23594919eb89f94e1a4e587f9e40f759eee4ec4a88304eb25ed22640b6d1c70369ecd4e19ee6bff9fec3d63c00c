{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"E:\\\\Aman\\\\Newfolder\\\\React.js\\\\Next.js\\\\project\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetails from '../../components/meetups/MeetupDetails';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst MeetupInfo = props => {\n  return /*#__PURE__*/_jsxDEV(MeetupDetails, {\n    image: props.dataLists.image,\n    title: props.dataLists.title,\n    address: props.dataLists.address,\n    description: props.dataLists.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 9\n  }, this);\n};\n\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://aman001:aman28@mycluster.o3hq5.mongodb.net/nextjs?retryWrites=true&w=majority');\n  const connectDB = client.db();\n  const meetupCollections = connectDB.collection('meetups');\n  const meetups = await meetupCollections.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => {\n      return {\n        params: {\n          meetupId: meetup._id.toString()\n        }\n      };\n    })\n  };\n};\nexport const getStaticProps = async context => {\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect('mongodb+srv://aman001:aman28@mycluster.o3hq5.mongodb.net/nextjs?retryWrites=true&w=majority');\n  const connectDB = client.db();\n  const meetupCollections = connectDB.collection('meetups');\n  const selectMeetup = await meetupCollections.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close(); // fetch the data from API\n\n  return {\n    props: {\n      dataLists: selectMeetup\n    }\n  };\n};\nexport default MeetupInfo;","map":{"version":3,"sources":["E:/Aman/Newfolder/React.js/Next.js/project/pages/[meetupId]/index.js"],"names":["MeetupDetails","MongoClient","ObjectId","MeetupInfo","props","dataLists","image","title","address","description","getStaticPaths","client","connect","connectDB","db","meetupCollections","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectMeetup","findOne"],"mappings":";;AAAA,OAAOA,aAAP,MAA0B,wCAA1B;AAEA,SAAQC,WAAR,EAAoBC,QAApB,QAAmC,SAAnC;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC1B,sBACI,QAAC,aAAD;AACI,IAAA,KAAK,EAAEA,KAAK,CAACC,SAAN,CAAgBC,KAD3B;AAEI,IAAA,KAAK,EAAEF,KAAK,CAACC,SAAN,CAAgBE,KAF3B;AAGI,IAAA,OAAO,EAAEH,KAAK,CAACC,SAAN,CAAgBG,OAH7B;AAII,IAAA,WAAW,EAAEJ,KAAK,CAACC,SAAN,CAAgBI;AAJjC;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CATD;;AAWA,OAAO,MAAMC,cAAc,GAAG,YAAY;AAEtC,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,6FAApB,CAArB;AAEA,QAAMC,SAAS,GAAGF,MAAM,CAACG,EAAP,EAAlB;AAEA,QAAMC,iBAAiB,GAAGF,SAAS,CAACG,UAAV,CAAqB,SAArB,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA0B;AAACC,IAAAA,GAAG,EAAC;AAAL,GAA1B,EAAmCC,OAAnC,EAAtB;AAEAT,EAAAA,MAAM,CAACU,KAAP;AAEA,SAAM;AACFC,IAAAA,QAAQ,EAAC,KADP;AAEFC,IAAAA,KAAK,EAACN,OAAO,CAACO,GAAR,CAAaC,MAAD,IAAU;AACxB,aAAM;AACFC,QAAAA,MAAM,EAAC;AACHC,UAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADP;AADL,OAAN;AAKH,KANK;AAFJ,GAAN;AAUH,CAtBM;AAwBP,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AAE3C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMhB,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CAAoB,6FAApB,CAArB;AAEA,QAAMC,SAAS,GAAGF,MAAM,CAACG,EAAP,EAAlB;AAEA,QAAMC,iBAAiB,GAAGF,SAAS,CAACG,UAAV,CAAqB,SAArB,CAA1B;AAEA,QAAMe,YAAY,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAACb,IAAAA,GAAG,EAAEjB,QAAQ,CAACyB,QAAD;AAAd,GAA1B,CAA3B;AAEAhB,EAAAA,MAAM,CAACU,KAAP,GAZ2C,CAa3C;;AACA,SAAM;AACFjB,IAAAA,KAAK,EAAC;AACFC,MAAAA,SAAS,EAAC0B;AADR;AADJ,GAAN;AAKH,CAnBM;AAqBP,eAAe5B,UAAf","sourcesContent":["import MeetupDetails from '../../components/meetups/MeetupDetails';\r\n\r\nimport {MongoClient,ObjectId} from 'mongodb';\r\n\r\nconst MeetupInfo = (props) => {\r\n    return(\r\n        <MeetupDetails\r\n            image={props.dataLists.image}\r\n            title={props.dataLists.title}\r\n            address={props.dataLists.address}\r\n            description={props.dataLists.description}\r\n         />\r\n    )\r\n}\r\n\r\nexport const getStaticPaths = async () => {\r\n\r\n    const client = await MongoClient.connect('mongodb+srv://aman001:aman28@mycluster.o3hq5.mongodb.net/nextjs?retryWrites=true&w=majority');\r\n\r\n    const connectDB = client.db();\r\n\r\n    const meetupCollections = connectDB.collection('meetups');\r\n\r\n    const meetups = await meetupCollections.find({},{_id:1}).toArray();\r\n\r\n    client.close();\r\n\r\n    return{\r\n        fallback:false,\r\n        paths:meetups.map((meetup)=>{\r\n            return{\r\n                params:{\r\n                    meetupId: meetup._id.toString()\r\n                }\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const getStaticProps = async(context) =>{\r\n\r\n    const meetupId = context.params.meetupId;\r\n    \r\n    const client = await MongoClient.connect('mongodb+srv://aman001:aman28@mycluster.o3hq5.mongodb.net/nextjs?retryWrites=true&w=majority');\r\n\r\n    const connectDB = client.db();\r\n\r\n    const meetupCollections = connectDB.collection('meetups');\r\n\r\n    const selectMeetup = await meetupCollections.findOne({_id: ObjectId(meetupId)});\r\n\r\n    client.close();\r\n    // fetch the data from API\r\n    return{\r\n        props:{\r\n            dataLists:selectMeetup\r\n        }\r\n    }\r\n}\r\n\r\nexport default MeetupInfo;"]},"metadata":{},"sourceType":"module"}